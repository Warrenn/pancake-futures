/*

check every 1s
==============

check the portfolio status
get upper strike lower 
get the market value
get current order position

short: 
    loan value made but no holding amount
long: 
    no loan and no coin
    loan value but have a holding amount

if loan < orderSize:
    take out a loan for difference
    buy a little bit more for interest and overruns
    add bit to holding
    add difference to holding

if holding < loanSize and above strike:
    buy difference
    add difference to holding
    long position

if holding > 0 and loanSize > 0  and below strike:
    sell holding
    holding is 0
    short position

if holding >= loanSize and aboveStrike:
    long position

if holding = 0 and loanSize > 0 and below strike:
    short position

if shorting the coin:

    if market lower than strike but higher than lower
    buy order is at strike if not make it so

    if market lower than lower
    buy order is at lower if not make it sow

if longing the coin:

    if market higher than upper
    sell is at upper if not make it so

    if market higher than strike but lower than upper
    sell is at strike if not make it so

for every filled order
======================

if completed order is sell place buy immediately at price of completed order
if completed order is buy place sell immediately at price of completed order



async function placeClosingStraddle(settlementDate: Date, size: float) {
    const months = ["JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"];
    let { result: { price } } = await client.getLastTradedPrice(symbol);
    let contractPrice = Math.floor(price / 25) * 25;
    let lowerStrike = (price % 25) < 12.5 ? contractPrice - 25 : contractPrice;
    let higherStrike = lowerStrike + 50;

    let dateStr = `0${settlementDate.getUTCDate()}`;
    dateStr = dateStr.substring(dateStr.length - 2);
    let yearStr = `${settlementDate.getUTCFullYear()}`;
    yearStr = yearStr.substring(yearStr.length - 2);

    let putSymbol = `${baseCurrency}-${dateStr}${months[settlementDate.getUTCMonth()]}${yearStr}-${lowerStrike}-P`;
    let callSymbol = `${baseCurrency}-${dateStr}${months[settlementDate.getUTCMonth()]}${yearStr}-${higherStrike}-C`;

    var { result: putPosition, retCode, retMsg } = await optionsClient.getSymbolTicker(putSymbol);
    if (retCode != 0) {
        logError(`get option ${putSymbol} (${retCode}) failed ${retMsg}`);
        return;
    }

    var { result: callPosition, retCode, retMsg } = await optionsClient.getSymbolTicker(callSymbol);
    if (retCode != 0) {
        logError(`get option ${callSymbol} (${retCode}) failed ${retMsg}`);
        return;
    }

    let markTotal = +putPosition.markPrice + +callPosition.markPrice;
    if (isNaN(markTotal)) {
        logError(`invalid return values put: ${JSON.stringify(putPosition)} and call: ${JSON.stringify(callPosition)}!`);
        return;
    }

    let putSize = Math.max(floor(size * (+callPosition.markPrice / markTotal), 2), 0.1);
    let callSize = Math.max(floor(size * (+putPosition.markPrice / markTotal), 2), 0.1);

    var { retCode, retMsg } = await optionsClient.submitOrder({
        orderQty: `${putSize}`,
        orderType: "Market",
        side: "Buy",
        symbol: putSymbol,
        timeInForce: "ImmediateOrCancel",
        orderLinkId: `${uuid()}`
    });
    if (retCode != 0) {
        logError(`put order failed ${putSymbol} ${putSize} (${retCode}) failed ${retMsg}`);
    }

    var { retCode, retMsg } = await optionsClient.submitOrder({
        orderQty: `${size}`,
        orderType: "Market",
        side: "Buy",
        symbol: callSymbol,
        timeInForce: "ImmediateOrCancel",
        orderLinkId: `${uuid()}`
    });
    if (retCode != 0) {
        logError(`call order failed ${callSymbol} ${callSize} (${retCode}) failed ${retMsg}`);
    }
}

function getStraddleTimeConfig(config: string): StraddleTimeConfig {
    var parts = config.split(':');
    return { hours: parseInt(parts[0]), minutes: parseInt(parts[1]) };
}

        optionsClient = new USDCOptionClient({
            testnet: useTestnet,
            key: process.env.API_KEY,
            secret: process.env.API_SECRET,
            recv_window: 999999
        });

        
        currentMoment = new Date();
        let extraDay = 1;

        if (currentMoment.getUTCHours() < 8) extraDay = 0;

        let expiryTime = new Date();
        expiryTime.setUTCDate(expiryTime.getUTCDate() + extraDay);
        expiryTime.setUTCHours(8);
        expiryTime.setUTCMinutes(0);
        expiryTime.setUTCSeconds(0);
        expiryTime.setUTCMilliseconds(0);

        let straddleMoment = new Date();
        straddleMoment.setUTCDate(straddleMoment.getUTCDate() + extraDay);
        straddleMoment.setUTCHours(straddleTimeConfig.hours);
        straddleMoment.setUTCMinutes(straddleTimeConfig.minutes);
        straddleMoment.setUTCSeconds(0);
        straddleMoment.setUTCMilliseconds(0);


            currentMoment = new Date();
            if (currentMoment > expiryTime) {
                spotStrikePrice = 0;
                initialEquity = 0;
                targetProfit = 0;
                straddlePlaced = false;
                break;
            }
            if (currentMoment > straddleMoment && !straddlePlaced) {
                await placeClosingStraddle(expiryTime, straddleSize);
                straddlePlaced = true;
                continue;
            }
*/